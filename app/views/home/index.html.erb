<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 2</title>
    <script type="text/javascript" src="assets/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

var game = new Phaser.Game(1200, 800, Phaser.CANVAS, '', { preload: preload, create: create, update: update});

var player;
var cursors;

var map;
var walls;
var floor;
var windows;

var bullets;
var fireRate = 200;
var nextFire = 1;
var bullet;

function preload () {
    game.load.tilemap('map', 'assets/map3.json', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('tile1', 'assets/tile_42.png');
    game.load.image('tile2', 'assets/tile_43.png');
    game.load.image('tile3', 'assets/tile_12.png');
    game.load.image('tile4', 'assets/tile_435.png');
    game.load.image('tile5', 'assets/tile_20.png');
    game.load.image('tile6', 'assets/tile_436.png');

    game.load.spritesheet('mainchar', 'assets/mainChar.png', 60, 44);
    game.load.image('bullet', 'assets/bulletred.png');

}

function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);

    game.stage.backgroundColor = '#00000';
    
    cursors = game.input.keyboard.createCursorKeys();

    game.time.advancedTiming = true;
    game.time.desriredFps = 120;
    
    map = game.add.tilemap('map')
    map.addTilesetImage('tile_42', 'tile1');
    map.addTilesetImage('tile_43', 'tile2');
    map.addTilesetImage('tile_12', 'tile3');
    map.addTilesetImage('tile_435', 'tile4');
    map.addTilesetImage('tile_20', 'tile5');
    map.addTilesetImage('tile_436', 'tile6');

    map.setCollisionBetween(1, 10000, true, walls);

    walls = map.createLayer('Walls');
    floor = map.createLayer('Floor');
    windows = map.createLayer('Windows');

    player = game.add.sprite(120, 680, 'mainchar');
    game.physics.arcade.enable(player);
    player.anchor.setTo(0.5, .5)

    player.body.collideWorldBounds = true;
    player.animations.add('run', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 22, true);
    player.bringToTop();

    bullets = game.add.group();
    game.physics.arcade.enable(bullets);
    bullets.enableBody = true;
    

    bullets.createMultiple(10, 'bullet');
    bullets.setAll('checkWorldBounds', true);
    bullets.setAll('outOfBoundsKill', true);



    // game.camera.follow(player)
    // game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
    // game.camera.focusOnXY(0, 0);


}

function update() {

    player.body.velocity.x = 0;
    player.body.velocity.y = 0;

    game.physics.arcade.collide(player, walls);
    
    game.physics.arcade.collide(bullets, walls, collisionHandler, null, this);


    if (cursors.up.isDown){
        game.time.slowMotion = 1
        player.body.velocity.y = -150;
        player.animations.play('run');

        if (cursors.up.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
        else if (cursors.up.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
    }
    else if (cursors.down.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.y = 150;
        player.animations.play('run');

        if (cursors.down.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
        else if (cursors.down.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
    }
    else if (cursors.left.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = -150;
        player.animations.play('run');
    }
    else if (cursors.right.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = 150;
        player.animations.play('run');
    }
    
    else
    {
        game.time.slowMotion = 10
        player.animations.stop();
        player.frame = 0;

    }

    player.rotation = game.physics.arcade.angleToPointer(player)

    if (game.input.activePointer.isDown)
    {
        fire();
    }

    // if (cursors.isUp = true){
    //     slowTime();
    // }
    
}

// function slowTime() {
//     game.time.slowMotion = 1
// }

function fire() {
    if (game.time.now > nextFire && bullets.countDead() > 0)
    {
        nextFire = game.time.now + fireRate;

        bullet = bullets.getFirstDead();

        bullet.reset(player.x, player.y);

        bullet.rotation = game.physics.arcade.moveToPointer(bullet, 1000, game.input.activePointer);

    }
}

function collisionHandler (bullets, walls) {

    //  When a bullet hits an alien we kill them both
    bullets.kill();    
}

</script>

    </body>
</html>