<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 2</title>
    <script type="text/javascript" src="assets/phaser.min.js"></script>
    <script type="text/javascript" src="assets/boot.js"></script>
    <script type="text/javascript" src="assets/game.js"></script>
    <script type="text/javascript" src="assets/load.js"></script>
    <script type="text/javascript" src="assets/menu.js"></script>
    <script type="text/javascript" src="assets/play.js"></script>

    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

TheEnemy = function(index, game, player, bullets){
    var x = game.world.randomX;
    var y = game.world.randomY;

    this.game = game;
    this.health = 1;
    this.player = player;
    this.bullets = bullets;
    this.fireRate = 600;
    this.nextFire = 1;
    this.alive = true;

    this.enemyGuy = game.add.sprite(x, y, 'enemy_sprite');

    this.enemyGuy.anchor.setTo(0.5, 0.5)

    this.enemyGuy.name = index.toString();
    game.physics.enable(this.enemyGuy, Phaser.Physics.ARCADE);
    this.enemyGuy.body.immovable = false;
    this.enemyGuy.body.collideWorldBounds = true;


};

TheEnemy.prototype.update = function(){
    this.enemyGuy.rotation = this.game.physics.arcade.angleBetween(this.enemyGuy, this.player);
}

var game = new Phaser.Game(1200, 700, Phaser.CANVAS, '', { preload: preload, create: create, update: update});

var player;
var bulletPoint;

var cursors;
var meleeKey;

var map;
var walls;
var floor;
var windows;

var bullets;
var fireRate = 200;
var nextFire = 1;
var bullet;

var badGuys;

var enemies;
var enemyGuy;

var enemyBullets;
var enemiesTotal = 0;
var enemiesAlive = 0;
var firingTimer = 0;
var enemyFireRate = 600;
var enemyNextFire = 1;
var livingEnemies = [];
var bitmap;

function preload () {
    game.load.tilemap('map', 'assets/finalmap.json', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('tile1', 'assets/tile_42.png');
    game.load.image('tile2', 'assets/tile_43.png');
    game.load.image('tile3', 'assets/tile_12.png');
    game.load.image('tile4', 'assets/tile_435.png');
    game.load.image('tile5', 'assets/tile_20.png');
    game.load.image('tile6', 'assets/tile_436.png');
    game.load.image('block', 'assets/raycastblock.png')
    game.load.atlas('johnwick', 'assets/jsonsprites.png', 'assets/jsonsprites.json')
    game.load.atlas('enemy_sprite', 'assets/enemy_sprites.png', 'assets/enemy_sprites.json')
    game.load.spritesheet('lookupbadguy', 'assets/badguysprite.png', 35, 75, 20)
    game.load.image('bullet', 'assets/bulletred.png');
    game.load.image('blackbullet', 'assets/blackbullet.png')

}

function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);

    game.stage.backgroundColor = '#00000';

    bitmap = game.add.bitmapData(game.width, game.height);
    bitmap.context.fillStyle = '';
    bitmap.context.strokeStyle = 'rgb(255, 255, 255)';
    game.add.image(0, 0, bitmap);
    
    cursors = game.input.keyboard.createCursorKeys();
    meleeKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

    game.time.advancedTiming = true;
    game.time.desiredFps = 120;
    
    map = game.add.tilemap('map')
    map.addTilesetImage('tile_42', 'tile1');
    map.addTilesetImage('tile_43', 'tile2');
    map.addTilesetImage('tile_12', 'tile3');
    map.addTilesetImage('tile_435', 'tile4');
    map.addTilesetImage('tile_436', 'tile6');

    map.setCollisionBetween(1, 2400, true, walls);

    outerwalls = map.createLayer('outer_walls');
    floor = map.createLayer('floor');
    windows = map.createLayer('windows');

    enemies = [];

    enemiesTotal = 3;
    enemiesAlive = 3;

    for (var i = 0; i < enemiesTotal; i++)
    {
        enemies.push(new TheEnemy(i, game, enemyGuy, enemyBullets));
    }

    // enemies = game.add.group();
    // enemies.enableBody = true;
    // map.createFromObjects('Enemies', 6, 'enemy_sprite', 0, true, false, enemies);
    // enemies.physicsBodyType = Phaser.Physics.ARCADE;

    badGuys = game.add.group();
    badGuys.enableBody = true;
    badGuys.setAll('anchor.x', 0.5);
    badGuys.setAll('anchor.y', 0.5);
    badGuys.physicsBodyType = Phaser.Physics.ARCADE;

    createBadGuys();

    player = game.add.sprite(440, 300, 'johnwick');
    game.physics.arcade.enable(player);
    player.anchor.setTo(0.5, 0.5)
    player.body.collideWorldBounds = true;
    player.animations.add('run', Phaser.Animation.generateFrameNames ('run', 1, 19), 22, true);
    player.animations.add('melee', Phaser.Animation.generateFrameNames('hit', 1, 15), 18, true);
    player.bringToTop();

    enemyBullets = game.add.group();
    enemyBullets.enableBody = true;
    enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    enemyBullets.createMultiple(30, 'blackbullet');
    enemyBullets.setAll('anchor.x', 0.5);
    enemyBullets.setAll('anchor.y', 0.5);
    enemyBullets.setAll('outOfBoundsKill', true);
    enemyBullets.setAll('checkWorldBounds', true);

    bullets = game.add.group();
    game.physics.arcade.enable(bullets);
    bullets.enableBody = true;
    bullets.createMultiple(10, 'bullet');
    bullets.setAll('checkWorldBounds', true);
    bullets.setAll('outOfBoundsKill', true);



    game.camera.follow(player)
    // game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
    // game.camera.focusOnXY(0, 0);

    var NUMBER_OF_WALLS = 3;
    walls = game.add.group();
    var i, x, y;
    for(i = 0; i < NUMBER_OF_WALLS; i++) {
        x = 802;
        y = i * 200 + 150 ;
        game.add.image(x, y, 'block', 0, walls).scale.setTo(.5, 8);
    }


}

function createBadGuys(){

    for (var y = 0; y < 2; y++)
    {
        for (var x = 0; x < 1; x++){
            var badGuy = badGuys.create(x, y * 250, 'lookupbadguy');
            badGuy.animations.add('badGuyRun', Phaser.Animation.generateFrameNames ('badguy', 1, 19), 22, true);
            badGuy.anchor.setTo(0.5, .5)

        }
    }
    badGuys.x = 920
    badGuys.y = 280
}

function update() {

    player.body.velocity.x = 0;
    player.body.velocity.y = 0;

    enemies.rotation = game.physics.arcade.angleBetween(enemies, player);

    game.physics.arcade.collide(player, outerwalls);
    game.physics.arcade.collide(bullets, outerwalls, collisionHandler, null, this);
    game.physics.arcade.collide(badGuys, walls);
    game.physics.arcade.collide(enemyBullets, outerwalls, bulletGoAway, null, this);
    game.physics.arcade.overlap(badGuys, bullets, enemyKill, null, this)

    enemiesAlive = 0;

    for (var i = 0; i < enemies.length; i++)
    {
        if (enemies[i].alive)
        {
            enemiesAlive++;
            game.physics.arcade.collide(enemies, bullets, enemyKill2, null, this);

        }
    }
    if (cursors.up.isDown){
        game.time.slowMotion = 1
        player.body.velocity.y = -150;
        player.animations.play('run');

        if (cursors.up.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
        else if (cursors.up.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
    }
    else if (cursors.down.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.y = 150;
        player.animations.play('run');

        if (cursors.down.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
        else if (cursors.down.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
    }
    else if (cursors.left.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = -150;
        player.animations.play('run');
    }
    else if (cursors.right.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = 150;
        player.animations.play('run');
    }
    else if (meleeKey.isDown){
        game.time.slowMotion = 1
        player.animations.play('melee')
    } 
    else
    {
        game.time.slowMotion = 10
        player.animations.stop();
        player.frame = 0;

    }

    player.rotation = game.physics.arcade.angleToPointer(player)

    if (game.input.activePointer.isDown){
        fire();
    }

    if (meleeKey.isDown){
        defenestrate();
    }

    bulletPoint = new Phaser.Point(player.x + 29, player.y + 8);
    bulletPoint.rotate(player.x, player.y, player.rotation)

    bitmap.context.clearRect(0, 0, this.game.width, this.game.height);

    badGuys.forEach(function(findMe){
        var ray = new Phaser.Line(findMe.x + 235, findMe.y + 67.5, player.x, player.y);
        var intersect = getWallIntersection(ray);
        findMe.anchor.setTo(.5, .5)

        if (intersect) {

        }
        else{
            bitmap.context.beginPath();
            bitmap.context.moveTo(findMe.x + 935, findMe.y + 67.5);
            bitmap.context.lineTo(player.x, player.y);
            // bitmap.context.stroke();
        }

    });

    bitmap.dirty = true;
}

function getWallIntersection(ray){
    var distanceToWall = Number.POSITIVE_INFINITY;
    var closestIntersection = null;

    walls.forEach(function(wall){
        var lines = [
            new Phaser.Line(wall.x, wall.y, wall.x + wall.width, wall.y),
            new Phaser.Line(wall.x, wall.y, wall.x, wall.y + wall.height),
            new Phaser.Line(wall.x + wall.width, wall.y,
                wall.x + wall.width, wall.y + wall.height),
            new Phaser.Line(wall.x, wall.y + wall.height,
                wall.x + wall.width, wall.y + wall.height)
        ];

        for(var i = 0; i < lines.length; i++) {
            var intersect = Phaser.Line.intersects(ray, lines[i]);
            if (intersect) {
                // Find the closest intersection
                distance =
                    game.math.distance(ray.start.x, ray.start.y, intersect.x, intersect.y);
                if (distance < distanceToWall) {
                    distanceToWall = distance;
                    closestIntersection = intersect;
                    enemyFires();
                }
            }
        }

    })

}

function defenestrate() {
        player.animations.play('melee');
    }

function fire() {
    if (game.time.now > nextFire && bullets.countDead() > 0)
    {
        nextFire = game.time.now + fireRate;

        bullet = bullets.getFirstDead();

        bullet.reset(bulletPoint.x, bulletPoint.y);

        bullet.rotation = game.physics.arcade.moveToPointer(bullet, 1000, game.input.activePointer);

    }
}

function collisionHandler (bullets, walls) {
    bullets.kill();    
}

function bulletGoAway (enemyBullets, outerwalls){
    enemyBullets.kill()
}

function enemyKill (badGuys, bullets) {
    bullets.kill()
    badGuys.kill()
}

function enemyKill2 (enemies, bullets) {
    bullets.kill()
    enemies.kill()
}

function enemyFires () {

    //  Grab the first bullet we can from the pool
    enemyBullet = enemyBullets.getFirstExists(false);

    livingEnemies.length=0;

    badGuys.forEachAlive(function(badGuy){

        // put every living enemy in an array
        livingEnemies.push(badGuy);
    });

if (game.time.now > enemyNextFire && enemyBullets.countDead() && livingEnemies.length > 0)
    
    {

        enemyNextFire = game.time.now + enemyFireRate;
        
        var random=game.rnd.integerInRange(0,livingEnemies.length-1);

        // randomly select one of them
        var shooter=livingEnemies[random];
        // And fire the bullet from this enemy
        enemyBullet.reset(shooter.body.x, shooter.body.y);

        game.physics.arcade.moveToObject(enemyBullet, player, 500);
        firingTimer = game.time.now + 200;
    }

}

</script>

    </body>
</html>