<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 2</title>
    <script type="text/javascript" src="assets/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

var game = new Phaser.Game(1200, 800, Phaser.CANVAS, '', { preload: preload, create: create, update: update});

var player;
var bulletPoint;

var cursors;
var meleeKey;

var map;
var walls;
var floor;
var windows;

var bullets;
var fireRate = 200;
var nextFire = 1;
var bullet;

var enemyBullet;
var enemiesTotal = 0;
var firingTimer = 0;
var enemyFireRate = 200;
var enemyNextFire = 1;
var livingEnemies = [];
var bitmap;

function preload () {
    game.load.tilemap('map', 'assets/map4.json', null, Phaser.Tilemap.TILED_JSON);
    game.load.image('tile1', 'assets/tile_42.png');
    game.load.image('tile2', 'assets/tile_43.png');
    game.load.image('tile3', 'assets/tile_12.png');
    game.load.image('tile4', 'assets/tile_435.png');
    game.load.image('tile5', 'assets/tile_20.png');
    game.load.image('tile6', 'assets/tile_436.png');
    game.load.atlas('johnwick', 'assets/jsonsprites.png', 'assets/jsonsprites.json')
    game.load.atlas('enemy_sprite', 'assets/enemy_sprites.png', 'assets/enemy_sprites.json')
    game.load.image('bullet', 'assets/bulletred.png');

}

function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);

    game.stage.backgroundColor = '#00000';

    bitmap = game.add.bitmapData(game.width, game.height);
    bitmap.context.fillStyle = 'rgb(255, 255, 255)';
    bitmap.context.strokeStyle = 'rgb(255, 255, 255)';
    game.add.image(0, 0, bitmap);
    
    cursors = game.input.keyboard.createCursorKeys();
    meleeKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

    game.time.advancedTiming = true;
    game.time.desriredFps = 120;
    
    map = game.add.tilemap('map')
    map.addTilesetImage('tile_42', 'tile1');
    map.addTilesetImage('tile_43', 'tile2');
    map.addTilesetImage('tile_12', 'tile3');
    map.addTilesetImage('tile_435', 'tile4');
    map.addTilesetImage('tile_20', 'tile5');
    map.addTilesetImage('tile_436', 'tile6');

    map.setCollisionBetween(1, 2400, true, walls);

    walls = map.createLayer('Walls');
    floor = map.createLayer('Floor');
    windows = map.createLayer('Windows');

    player = game.add.sprite(340, 700, 'johnwick');
    game.physics.arcade.enable(player);
    player.anchor.setTo(0.5, .5)
    player.body.collideWorldBounds = true;
    player.animations.add('run', Phaser.Animation.generateFrameNames ('run', 1, 19), 22, true);
    player.animations.add('melee', Phaser.Animation.generateFrameNames('hit', 1, 15), 18, true);
    player.bringToTop();


    enemies = game.add.group();
    enemies.enableBody = true;
    map.createFromObjects('Enemies', 6, 'enemy_sprite', 0, true, false, enemies);
    enemies.physicsBodyType = Phaser.Physics.ARCADE;

    enemyBullets = game.add.group();
    enemyBullets.enableBody = true;
    enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    enemyBullets.createMultiple(30, 'bullet');
    enemyBullets.setAll('anchor.x', 0.5);
    enemyBullets.setAll('anchor.y', 1);
    enemyBullets.setAll('outOfBoundsKill', true);
    enemyBullets.setAll('checkWorldBounds', true);

    bullets = game.add.group();
    game.physics.arcade.enable(bullets);
    bullets.enableBody = true;
    bullets.createMultiple(10, 'bullet');
    bullets.setAll('checkWorldBounds', true);
    bullets.setAll('outOfBoundsKill', true);



    game.camera.follow(player)
    // game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
    // game.camera.focusOnXY(0, 0);

    var NUMBER_OF_WALLS = 4;
    walls = game.add.group();
    var i, x, y;
    for(i = 0; i < NUMBER_OF_WALLS; i++) {
        x = i * game.width/NUMBER_OF_WALLS + 50;
        y = game.rnd.integerInRange(50, game.height - 200);
        game.add.image(x, y, 'block', 0, walls).scale.setTo(3, 3);
    }


}

function update() {

    player.body.velocity.x = 0;
    player.body.velocity.y = 0;

    
    game.physics.arcade.collide(enemies, walls);
    game.physics.arcade.overlap(enemies, bullets, enemyKill, null, this)
    game.physics.arcade.collide(bullets, walls, collisionHandler, null, this);


    if (cursors.up.isDown){
        game.time.slowMotion = 1
        player.body.velocity.y = -150;
        player.animations.play('run');

        if (cursors.up.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
        else if (cursors.up.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = -150;
            player.animations.play('run');
        }
    }
    else if (cursors.down.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.y = 150;
        player.animations.play('run');

        if (cursors.down.isDown && cursors.right.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = 150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
        else if (cursors.down.isDown && cursors.left.isDown)
        {
            game.time.slowMotion = 1
            player.body.velocity.x = -150;
            player.body.velocity.y = 150;
            player.animations.play('run');
        }
    }
    else if (cursors.left.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = -150;
        player.animations.play('run');
    }
    else if (cursors.right.isDown)
    {
        game.time.slowMotion = 1
        player.body.velocity.x = 150;
        player.animations.play('run');
    }
    else if (meleeKey.isDown){
        game.time.slowMotion = 1
        player.animations.play('melee')
    } 
    else
    {
        game.time.slowMotion = 10
        player.animations.stop();
        player.frame = 0;

    }

    player.rotation = game.physics.arcade.angleToPointer(player)

    // each.enemies.rotation = game.physics.arcade.angleBetween(enemies, player)

    if (game.input.activePointer.isDown){
        fire();
    }
    // if (game.time.now > firingTimer)
    //     {
    //         enemyFires();
    //     }

    if (meleeKey.isDown){
        meleebitch();
    }

    bulletPoint = new Phaser.Point(player.x + 29, player.y + 8);
    bulletPoint.rotate(player.x, player.y, player.rotation)

    bitmap.context.clearRect(0, 0, this.game.width, this.game.height);

    enemies.forEach(function(enemy){
        var ray = new Phaser.Line(enemy.x, enemy.y, player.x, player.y);
        var intersect = getWallIntersection(ray);

        if (intersect) {

        }
        else{
            bitmap.context.beginPath();
            bitmap.context.moveTo(enemy.x, enemy.y);
            bitmap.context.lineTo(player.x, player.y);
            bitmap.context.stroke();
            // enemyNextFire = game.time.now + enemyFireRate;

            //     enemyBullet = enemyBullets.getFirstDead();

            //     enemyBullet.reset(enemy.x, enemy.y);

            //     enemyBullet.rotation = game.physics.arcade.moveToObject(enemyBullet, 500, player)
            //     game.physics.arcade.moveToObject(enemyBullet, player, 500);
        }

    });

    bitmap.dirty = true;


}

function getWallIntersection(ray){
    var distanceToWall = Number.POSITIVE_INFINITY;
    var closestIntersection = null;

    walls.forEach(function(wall){
        var lines = [
            new Phaser.Line(wall.x, wall.y, wall.x + wall.width, wall.y),
            new Phaser.Line(wall.x, wall.y, wall.x, wall.y + wall.height),
            new Phaser.Line(wall.x + wall.width, wall.y,
                wall.x + wall.width, wall.y + wall.height),
            new Phaser.Line(wall.x, wall.y + wall.height,
                wall.x + wall.width, wall.y + wall.height)
        ];

        for(var i = 0; i < lines.length; i++) {
            var intersect = Phaser.Line.intersects(ray, lines[i]);
            if (intersect) {
                // Find the closest intersection
                distance =
                    game.math.distance(ray.start.x, ray.start.y, intersect.x, intersect.y);
                if (distance < distanceToWall) {
                    distanceToWall = distance;
                    closestIntersection = intersect;
                }
            }
        }

    })
    return closestIntersection

        game.physics.arcade.collide(player, walls);

}

function meleebitch() {
        player.animations.play('melee');
    }

function fire() {
    if (game.time.now > nextFire && bullets.countDead() > 0)
    {
        nextFire = game.time.now + fireRate;

        bullet = bullets.getFirstDead();

        bullet.reset(bulletPoint.x, bulletPoint.y);

        bullet.rotation = game.physics.arcade.moveToPointer(bullet, 1000, game.input.activePointer);

    }
}

function collisionHandler (bullets, walls) {

    //  When a bullet hits an alien we kill them both
    bullets.kill();    
}

function enemyKill (enemies, bullets) {

    bullets.kill()
    enemies.kill()
}

// function enemyFires () {

//     enemies.forEach (function(enemy) {

//                 enemyNextFire = game.time.now + enemyFireRate;

//                 enemyBullet = enemyBullets.getFirstDead();

//                 enemyBullet.reset(enemy.x, enemy.y);

//                 enemyBullet.rotation = game.physics.arcade.moveToObject(enemyBullet, 500, player)
//                 game.physics.arcade.moveToObject(enemyBullet, player, 500);

        
//     })

// }

</script>

    </body>
</html>